
import turtle
import random
import math

turtle.hideturtle()
turtle.speed(0)
turtle.tracer(0)
turtle.bgcolor("black")

#create a list of stars
stars = []
for i in range(800):
    x = random.randint(-800, 800)
    y = random.randint(-800, 800)
    stars.append([x, y])

def draw_stars():
    for star in stars:
        turtle.penup()
        turtle.goto(star[0], star[1])
        turtle.dot(2)

draw_stars()

#create the spaceship
ship = turtle.Turtle()
ship.shape("triangle")
ship.color("white")
ship.penup()
ship.speed(0)
ship.setheading(90)

#create the missile
missile = turtle.Turtle()
missile.shape("triangle")
missile.color("yellow")
missile.penup()
missile.speed(0)
missile.setheading(90)
missile.shapesize(0.3, 0.3)
missilespeed = 20
missilestate = "ready"

#create the enemy
enemy = turtle.Turtle()
enemy.shape("circle")
enemy.color("red")
enemy.penup()
enemy.speed(0)
enemy.setheading(270)
enemyspeed = 2

#create the score
score = 0

#create the lives
lives = 3

#create the border
border = turtle.Turtle()
border.speed(0)
border.color("white")
border.penup()
border.setposition(-300, -300)
border.pendown()
border.pensize(3)
for side in range(4):
    border.fd(600)
    border.lt(90)
border.hideturtle()

#create the pen
pen = turtle.Turtle()
pen.speed(0)
pen.color("white")
pen.penup()
pen.setposition(0, 260)
pen.write("Score: 0 Lives: 3", align="center", font=("Courier", 24, "normal"))
pen.hideturtle()

#move the ship left and right
def move_left():
    x = ship.xcor()
    x -= ship.speed(0)
    if x < -280:
        x = -280
    ship.setx(x)

def move_right():
    x = ship.xcor()
    x += ship.speed(0)
    if x > 280:
        x = 280
    ship.setx(x)

#fire the missile
def fire_missile():
    global missilestate
    if missilestate == "ready":
        missilestate = "fire"
        x = ship.xcor()
        y = ship.ycor() + 10
        missile.setposition(x, y)
        missile.showturtle()

#collision checking
def isCollision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False

#create keyboard bindings
turtle.listen()
turtle.onkeypress(move_left, "Left")
turtle.onkeypress(move_right, "Right")
turtle.onkeypress(fire_missile, "space")

#main game loop
while True:
    turtle.update()

    #move the enemy
    x = enemy.xcor()
    x += enemyspeed
    enemy.setx(x)

    #move the enemy back and down
    if enemy.xcor() > 280:
        y = enemy.ycor()
        y -= 40
        enemyspeed *= -1
        enemy.sety(y)

    if enemy.xcor() < -280:
        y = enemy.ycor()
        y -= 40
        enemyspeed *= -1
        enemy.sety(y)

    #move the missile
    if missilestate == "fire":
        y = missile.ycor()
        y += missilespeed
        missile.sety(y)

    #check to see if missile has gone to the top
    if missile.ycor() > 275:
        missile.hideturtle()
        missilestate = "ready"

    #check for a collision between the missile and the enemy
    if isCollision(missile, enemy):
        missile.hideturtle()
        missilestate = "ready"
        missile.setposition(0, -400)
        #update the score
        score += 10
        pen.clear()
        pen.write("Score: {} Lives: {}".format(score, lives), align="center", font=("Courier", 24, "normal"))

    #check for a collision between the enemy and the ship
    if isCollision(ship, enemy):
        ship.hideturtle()
        enemy.hideturtle()
        print("Game Over")
        
    #make the game restart
    if score == 100:
        score = 0
        lives = 3
        enemy.setposition(0, 0)
        ship.setposition(0, -250)
        ship.showturtle()
        enemy.showturtle()
        pen.clear()
        pen.write("Score: {} Lives: {}".format(score, lives), align="center", font=("Courier", 24, "normal"))

