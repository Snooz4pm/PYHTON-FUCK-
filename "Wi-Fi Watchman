#MIT License

#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "WIFI WATCHMAN"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import os
import sys
from scapy.all import *


def clear():
    os.system('cls' if os.name == 'nt' else 'clear')


def display_intro():
    print("Welcome to Wi-Fi Watchman - your WiFi auditing tool!")
    print("=============================================================")


def get_interface():
    interfaces = []
    print("Available Interfaces:")
    for i, interface in enumerate(get_if_list()):
        print("{}: {}".format(i+1, interface))
        interfaces.append(interface)
    choice = input("Select the interface to use for sniffing: ")
    try:
        choice = int(choice)
        if choice < 1 or choice > len(interfaces):
            raise ValueError
    except ValueError:
        print("Invalid choice. Please enter a number between 1 and {}.".format(len(interfaces)))
        return get_interface()
    return interfaces[choice-1]


def sniff_packets(iface):
    print("\nSniffing wireless packets...")
    sniff(iface=iface, prn=print_packet, store=0)


def print_packet(packet):
    if packet.haslayer(Dot11):
        if packet.type == 0 and packet.subtype == 8:
            print("SSID: {}".format(packet.info.decode()))
            print("BSSID: {}".format(packet.addr3))
            print("Channel: {}".format(ord(packet[Dot11Elt:3].info)))
            print("Signal Strength: {} dBm\n".format(packet.dBm_AntSignal))


def main():
    # Clear the terminal
    clear()

    # Display intro screen
    display_intro()

    # Get the interface to use for sniffing
    iface = get_interface()

    # Start sniffing packets
    sniff_packets(iface)


if __name__ == '__main__':
    main()

